pipeline {
    agent {
        kubernetes {
            defaultContainer 'oc'
            yaml """\
        apiVersion: v1
        kind: Pod
        metadata:
          labels:
            component: builder
            lang: nodejs
            app: react-admin-core-module
        spec:
          containers:
          - name: oc
            image: image-registry.openshift-image-registry.svc:5000/ci-cd/py:3.7
            command:
            - cat
            tty: true
            imagePullPolicy: Always
          - name: npm
            image: node:lts
            command:
            - cat
            tty: true
            securityContext:
              runAsUser: 1000
            imagePullPolicy: Always




        """.stripIndent()
        }
    }
    options {
        timeout(time: 45, unit: 'MINUTES')
        disableConcurrentBuilds()
    }
    environment {
        OC_PROJECT = 'hetarchief'
        BASE_IMG = 'node:16-alpine'
        OC_URL = 'https://c113-e.private.eu-de.containers.cloud.ibm.com:30227'
        JIRA_URL = 'meemoo.atlassian.net'
        APP_NAME = 'react-admin-core-module'

    }
    stages {
        stage('Calculate extra ENV vars') {
            steps {
                script {
                    env.GIT_SHORT_COMMIT = sh(script: "printf \$(git rev-parse --short ${GIT_COMMIT})", returnStdout: true)
                    env.IMAGE_TAG = sh(script: 'git describe --tags || echo latest', returnStdout: true)
                    // The name used for the build config based on the image tag
                    // Replace '.' with '_' as '.' is not allowed.
                    env.BUILD_CONFIG_NAME = sh(script: 'echo "${IMAGE_TAG}" | sed -r "s/\\./\\-/g"', returnStdout: true)
                }
            }
        }
        stage('Build ui code') {
            steps {
                container('npm') {
                    script {
                        sh'''#!/bin/bash
                        npm --registry=https://registry.npmjs.org install && cd ui && npm --registry=https://registry.npmjs.org install && npm run build && cd .. || exit 1
                        '''
                    } // script
                }
            }
        }// end stage build

        stage('Publish ui code') {
			steps {
				container('npm') {

					script {
						try {
							echo "Publishing admin-core-ui package to registry"
							configFileProvider([configFile(fileId: "npmrc", variable: 'configFile')]) {
							  sh "cat $configFile > .npmrc"
							}
							sh '''#/bin/bash
							cp .npmrc ./ui
							cd ui
							npm publish
							rm -f .npmrc
							cd ..
							'''
						} catch (err) {
							echo err.getMessage()
							if [[ err.getMessage() == *"Repository does not allow updating assets"* ]]; then
                            	echo "admin-core-ui package version number was not updated, continuing with api build"
                            else
                            	echo "admin-core-ui package failed to publish"
                            	currentBuild.result = 'FAILURE'
                            fi
						}
					} // script
				}// end container
			} // steps
		} // stage

        stage('Build api code') {
            steps {
                container('npm') {
                    script {
                        sh'''#!/bin/bash
                        cd api && npm --registry=https://registry.npmjs.org install && npm run build && cd .. || exit 1
                        '''
                    } // script
                }
            }
        }// end stage build

        stage('Publish api code') {
			steps {
				container('npm') {

					script {
						try {
							echo "Publishing admin-core-api package to registry"
							configFileProvider([configFile(fileId: "npmrc", variable: 'configFile')]) {
							  sh "cat $configFile > .npmrc"
							}
							sh '''#/bin/bash
							cp .npmrc ./api
							cd api
							npm publish
							rm -f .npmrc
							cd ..
							echo "removing .npmrc for installto nexus not seems @viaa:registry=.."
							rm -f .npmrc
							'''
						} catch (err) {
							echo err.getMessage()
							if [[ err.getMessage() == *"Repository does not allow updating assets"* ]]; then
                            	echo "admin-core-api package version number was not updated, continuing pipeline"
                            else
                            	echo "admin-core-api package failed to publish"
                            	currentBuild.result = 'FAILURE'
                            fi
						}
					} // script
				}// end container
			} // steps
		} // stage
	} // stages

	post {

		always {

			container('default') {
				// Archive tets results
				script {
					if (fileExists('./tests/test_results.xml')) {
						junit 'tests/test_results.xml'
					} else {
						echo 'No test results found'
					}
				}
			}
		}
	}
}

void getImageFromDockerfile() {
    return 'node:lts'
}

void setGitHubBuildStatus(String message, String state) {
    step([
        $class: 'GitHubCommitStatusSetter',
        reposSource: [$class: 'ManuallyEnteredRepositorySource', url: "${GIT_URL}"],
        commitShaSource: [$class: 'ManuallyEnteredShaSource', sha: "${GIT_COMMIT}"],
        errorHandlers: [[$class: 'ChangingBuildStatusErrorHandler', result: 'UNSTABLE']],
        statusResultSource: [ $class: 'ConditionalStatusResultSource', results: [[$class: 'AnyBuildResult', message: message, state: state]] ]
    ])
}

void getAllCommitsBetweenTags(String from, String to) {
    commit_messages = sh(script: "git log ${from}...${to} --merges --format=%b", returnStdout: true)

    return commit_messages
}

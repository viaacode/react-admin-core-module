/**
 * Generated by @openapi-codegen
 *
 * @version 2.0.23
 */
import * as reactQuery from '@tanstack/react-query';
import { useServerContext, ServerContext } from './serverContext';
import type * as Fetcher from './serverFetcher';
import { serverFetch } from './serverFetcher';
import type * as Schemas from './serverSchemas';

export type AdminNavigationsControllerGetNavigationBarsOverviewError =
	Fetcher.ErrorWrapper<undefined>;

export type AdminNavigationsControllerGetNavigationBarsOverviewVariables =
	ServerContext['fetcherOptions'];

/**
 * Get an overview of all the navigation bars that exist
 */
export const fetchAdminNavigationsControllerGetNavigationBarsOverview = (
	variables: AdminNavigationsControllerGetNavigationBarsOverviewVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		AdminNavigationsControllerGetNavigationBarsOverviewError,
		undefined,
		{},
		{},
		{}
	>({ url: '/admin/navigations', method: 'get', ...variables, signal });

/**
 * Get an overview of all the navigation bars that exist
 */
export const useAdminNavigationsControllerGetNavigationBarsOverview = <TData = undefined>(
	variables: AdminNavigationsControllerGetNavigationBarsOverviewVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			undefined,
			AdminNavigationsControllerGetNavigationBarsOverviewError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<
		undefined,
		AdminNavigationsControllerGetNavigationBarsOverviewError,
		TData
	>(
		queryKeyFn({
			path: '/admin/navigations',
			operationId: 'adminNavigationsControllerGetNavigationBarsOverview',
			variables,
		}),
		({ signal }) =>
			fetchAdminNavigationsControllerGetNavigationBarsOverview(
				{ ...fetcherOptions, ...variables },
				signal
			),
		{
			...options,
			...queryOptions,
		}
	);
};

export type AdminNavigationsControllerGetAllNavigationElementsError =
	Fetcher.ErrorWrapper<undefined>;

export type AdminNavigationsControllerGetAllNavigationElementsVariables =
	ServerContext['fetcherOptions'];

/**
 * Get all navigation elements for the current user
 */
export const fetchAdminNavigationsControllerGetAllNavigationElements = (
	variables: AdminNavigationsControllerGetAllNavigationElementsVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		AdminNavigationsControllerGetAllNavigationElementsError,
		undefined,
		{},
		{},
		{}
	>({ url: '/admin/navigations/items', method: 'get', ...variables, signal });

/**
 * Get all navigation elements for the current user
 */
export const useAdminNavigationsControllerGetAllNavigationElements = <TData = undefined>(
	variables: AdminNavigationsControllerGetAllNavigationElementsVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			undefined,
			AdminNavigationsControllerGetAllNavigationElementsError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<
		undefined,
		AdminNavigationsControllerGetAllNavigationElementsError,
		TData
	>(
		queryKeyFn({
			path: '/admin/navigations/items',
			operationId: 'adminNavigationsControllerGetAllNavigationElements',
			variables,
		}),
		({ signal }) =>
			fetchAdminNavigationsControllerGetAllNavigationElements(
				{ ...fetcherOptions, ...variables },
				signal
			),
		{
			...options,
			...queryOptions,
		}
	);
};

export type AdminNavigationsControllerCreateNavigationElementError =
	Fetcher.ErrorWrapper<undefined>;

export type AdminNavigationsControllerCreateNavigationElementVariables = {
	body: Schemas.CreateNavigationDto;
} & ServerContext['fetcherOptions'];

/**
 * Add one navigation element to a specific navigation bar
 */
export const fetchAdminNavigationsControllerCreateNavigationElement = (
	variables: AdminNavigationsControllerCreateNavigationElementVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		AdminNavigationsControllerCreateNavigationElementError,
		Schemas.CreateNavigationDto,
		{},
		{},
		{}
	>({ url: '/admin/navigations/items', method: 'put', ...variables, signal });

/**
 * Add one navigation element to a specific navigation bar
 */
export const useAdminNavigationsControllerCreateNavigationElement = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			AdminNavigationsControllerCreateNavigationElementError,
			AdminNavigationsControllerCreateNavigationElementVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useServerContext();
	return reactQuery.useMutation<
		undefined,
		AdminNavigationsControllerCreateNavigationElementError,
		AdminNavigationsControllerCreateNavigationElementVariables
	>(
		(variables: AdminNavigationsControllerCreateNavigationElementVariables) =>
			fetchAdminNavigationsControllerCreateNavigationElement({
				...fetcherOptions,
				...variables,
			}),
		options
	);
};

export type AdminNavigationsControllerUpdateNavigationElementPathParams = {
	id: string;
};

export type AdminNavigationsControllerUpdateNavigationElementError =
	Fetcher.ErrorWrapper<undefined>;

export type AdminNavigationsControllerUpdateNavigationElementVariables = {
	body: Schemas.CreateNavigationDto;
	pathParams: AdminNavigationsControllerUpdateNavigationElementPathParams;
} & ServerContext['fetcherOptions'];

/**
 * Update an existing navigation element
 */
export const fetchAdminNavigationsControllerUpdateNavigationElement = (
	variables: AdminNavigationsControllerUpdateNavigationElementVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		AdminNavigationsControllerUpdateNavigationElementError,
		Schemas.CreateNavigationDto,
		{},
		{},
		AdminNavigationsControllerUpdateNavigationElementPathParams
	>({ url: '/admin/navigations/items/{id}', method: 'patch', ...variables, signal });

/**
 * Update an existing navigation element
 */
export const useAdminNavigationsControllerUpdateNavigationElement = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			AdminNavigationsControllerUpdateNavigationElementError,
			AdminNavigationsControllerUpdateNavigationElementVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useServerContext();
	return reactQuery.useMutation<
		undefined,
		AdminNavigationsControllerUpdateNavigationElementError,
		AdminNavigationsControllerUpdateNavigationElementVariables
	>(
		(variables: AdminNavigationsControllerUpdateNavigationElementVariables) =>
			fetchAdminNavigationsControllerUpdateNavigationElement({
				...fetcherOptions,
				...variables,
			}),
		options
	);
};

export type AdminNavigationsControllerDeleteNavigationElementPathParams = {
	id: string;
};

export type AdminNavigationsControllerDeleteNavigationElementError =
	Fetcher.ErrorWrapper<undefined>;

export type AdminNavigationsControllerDeleteNavigationElementVariables = {
	pathParams: AdminNavigationsControllerDeleteNavigationElementPathParams;
} & ServerContext['fetcherOptions'];

/**
 * Remove a navigation element. Also deleting it from its navigation bar
 */
export const fetchAdminNavigationsControllerDeleteNavigationElement = (
	variables: AdminNavigationsControllerDeleteNavigationElementVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		AdminNavigationsControllerDeleteNavigationElementError,
		undefined,
		{},
		{},
		AdminNavigationsControllerDeleteNavigationElementPathParams
	>({ url: '/admin/navigations/items/{id}', method: 'delete', ...variables, signal });

/**
 * Remove a navigation element. Also deleting it from its navigation bar
 */
export const useAdminNavigationsControllerDeleteNavigationElement = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			AdminNavigationsControllerDeleteNavigationElementError,
			AdminNavigationsControllerDeleteNavigationElementVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useServerContext();
	return reactQuery.useMutation<
		undefined,
		AdminNavigationsControllerDeleteNavigationElementError,
		AdminNavigationsControllerDeleteNavigationElementVariables
	>(
		(variables: AdminNavigationsControllerDeleteNavigationElementVariables) =>
			fetchAdminNavigationsControllerDeleteNavigationElement({
				...fetcherOptions,
				...variables,
			}),
		options
	);
};

export type AdminNavigationsControllerGetNavigationElementByIdPathParams = {
	id: string;
};

export type AdminNavigationsControllerGetNavigationElementByIdError =
	Fetcher.ErrorWrapper<undefined>;

export type AdminNavigationsControllerGetNavigationElementByIdVariables = {
	pathParams: AdminNavigationsControllerGetNavigationElementByIdPathParams;
} & ServerContext['fetcherOptions'];

/**
 * Get one navigation element by id
 */
export const fetchAdminNavigationsControllerGetNavigationElementById = (
	variables: AdminNavigationsControllerGetNavigationElementByIdVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		AdminNavigationsControllerGetNavigationElementByIdError,
		undefined,
		{},
		{},
		AdminNavigationsControllerGetNavigationElementByIdPathParams
	>({ url: '/admin/navigations/items/{id}', method: 'get', ...variables, signal });

/**
 * Get one navigation element by id
 */
export const useAdminNavigationsControllerGetNavigationElementById = <TData = undefined>(
	variables: AdminNavigationsControllerGetNavigationElementByIdVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			undefined,
			AdminNavigationsControllerGetNavigationElementByIdError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<
		undefined,
		AdminNavigationsControllerGetNavigationElementByIdError,
		TData
	>(
		queryKeyFn({
			path: '/admin/navigations/items/{id}',
			operationId: 'adminNavigationsControllerGetNavigationElementById',
			variables,
		}),
		({ signal }) =>
			fetchAdminNavigationsControllerGetNavigationElementById(
				{ ...fetcherOptions, ...variables },
				signal
			),
		{
			...options,
			...queryOptions,
		}
	);
};

export type AdminNavigationsControllerGetNavigationBarItemsByPlacementPathParams = {
	placement: string;
};

export type AdminNavigationsControllerGetNavigationBarItemsByPlacementError =
	Fetcher.ErrorWrapper<undefined>;

export type AdminNavigationsControllerGetNavigationBarItemsByPlacementVariables = {
	pathParams: AdminNavigationsControllerGetNavigationBarItemsByPlacementPathParams;
} & ServerContext['fetcherOptions'];

/**
 * Get all items inside one bar by placement id
 */
export const fetchAdminNavigationsControllerGetNavigationBarItemsByPlacement = (
	variables: AdminNavigationsControllerGetNavigationBarItemsByPlacementVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		AdminNavigationsControllerGetNavigationBarItemsByPlacementError,
		undefined,
		{},
		{},
		AdminNavigationsControllerGetNavigationBarItemsByPlacementPathParams
	>({ url: '/admin/navigations/{placement}', method: 'get', ...variables, signal });

/**
 * Get all items inside one bar by placement id
 */
export const useAdminNavigationsControllerGetNavigationBarItemsByPlacement = <TData = undefined>(
	variables: AdminNavigationsControllerGetNavigationBarItemsByPlacementVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			undefined,
			AdminNavigationsControllerGetNavigationBarItemsByPlacementError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<
		undefined,
		AdminNavigationsControllerGetNavigationBarItemsByPlacementError,
		TData
	>(
		queryKeyFn({
			path: '/admin/navigations/{placement}',
			operationId: 'adminNavigationsControllerGetNavigationBarItemsByPlacement',
			variables,
		}),
		({ signal }) =>
			fetchAdminNavigationsControllerGetNavigationBarItemsByPlacement(
				{ ...fetcherOptions, ...variables },
				signal
			),
		{
			...options,
			...queryOptions,
		}
	);
};

export type AdminOrganisationsControllerFetchOrganisationsWithUsersError =
	Fetcher.ErrorWrapper<undefined>;

export type AdminOrganisationsControllerFetchOrganisationsWithUsersVariables =
	ServerContext['fetcherOptions'];

export const fetchAdminOrganisationsControllerFetchOrganisationsWithUsers = (
	variables: AdminOrganisationsControllerFetchOrganisationsWithUsersVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		AdminOrganisationsControllerFetchOrganisationsWithUsersError,
		undefined,
		{},
		{},
		{}
	>({ url: '/admin/organisations/with-users', method: 'get', ...variables, signal });

export const useAdminOrganisationsControllerFetchOrganisationsWithUsers = <TData = undefined>(
	variables: AdminOrganisationsControllerFetchOrganisationsWithUsersVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			undefined,
			AdminOrganisationsControllerFetchOrganisationsWithUsersError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<
		undefined,
		AdminOrganisationsControllerFetchOrganisationsWithUsersError,
		TData
	>(
		queryKeyFn({
			path: '/admin/organisations/with-users',
			operationId: 'adminOrganisationsControllerFetchOrganisationsWithUsers',
			variables,
		}),
		({ signal }) =>
			fetchAdminOrganisationsControllerFetchOrganisationsWithUsers(
				{ ...fetcherOptions, ...variables },
				signal
			),
		{
			...options,
			...queryOptions,
		}
	);
};

export type PermissionsControllerGetPermissionsError = Fetcher.ErrorWrapper<undefined>;

export type PermissionsControllerGetPermissionsVariables = ServerContext['fetcherOptions'];

export const fetchPermissionsControllerGetPermissions = (
	variables: PermissionsControllerGetPermissionsVariables,
	signal?: AbortSignal
) =>
	serverFetch<undefined, PermissionsControllerGetPermissionsError, undefined, {}, {}, {}>({
		url: '/admin/permissions',
		method: 'get',
		...variables,
		signal,
	});

export const usePermissionsControllerGetPermissions = <TData = undefined>(
	variables: PermissionsControllerGetPermissionsVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<undefined, PermissionsControllerGetPermissionsError, TData>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, PermissionsControllerGetPermissionsError, TData>(
		queryKeyFn({
			path: '/admin/permissions',
			operationId: 'permissionsControllerGetPermissions',
			variables,
		}),
		({ signal }) =>
			fetchPermissionsControllerGetPermissions({ ...fetcherOptions, ...variables }, signal),
		{
			...options,
			...queryOptions,
		}
	);
};

export type TranslationsControllerGetTranslationsJsonError = Fetcher.ErrorWrapper<undefined>;

export type TranslationsControllerGetTranslationsJsonVariables = ServerContext['fetcherOptions'];

export const fetchTranslationsControllerGetTranslationsJson = (
	variables: TranslationsControllerGetTranslationsJsonVariables,
	signal?: AbortSignal
) =>
	serverFetch<undefined, TranslationsControllerGetTranslationsJsonError, undefined, {}, {}, {}>({
		url: '/admin/translations/nl.json',
		method: 'get',
		...variables,
		signal,
	});

export const useTranslationsControllerGetTranslationsJson = <TData = undefined>(
	variables: TranslationsControllerGetTranslationsJsonVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			undefined,
			TranslationsControllerGetTranslationsJsonError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, TranslationsControllerGetTranslationsJsonError, TData>(
		queryKeyFn({
			path: '/admin/translations/nl.json',
			operationId: 'translationsControllerGetTranslationsJson',
			variables,
		}),
		({ signal }) =>
			fetchTranslationsControllerGetTranslationsJson(
				{ ...fetcherOptions, ...variables },
				signal
			),
		{
			...options,
			...queryOptions,
		}
	);
};

export type TranslationsControllerGetTranslationsError = Fetcher.ErrorWrapper<undefined>;

export type TranslationsControllerGetTranslationsVariables = ServerContext['fetcherOptions'];

export const fetchTranslationsControllerGetTranslations = (
	variables: TranslationsControllerGetTranslationsVariables,
	signal?: AbortSignal
) =>
	serverFetch<undefined, TranslationsControllerGetTranslationsError, undefined, {}, {}, {}>({
		url: '/admin/translations',
		method: 'get',
		...variables,
		signal,
	});

export const useTranslationsControllerGetTranslations = <TData = undefined>(
	variables: TranslationsControllerGetTranslationsVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<undefined, TranslationsControllerGetTranslationsError, TData>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, TranslationsControllerGetTranslationsError, TData>(
		queryKeyFn({
			path: '/admin/translations',
			operationId: 'translationsControllerGetTranslations',
			variables,
		}),
		({ signal }) =>
			fetchTranslationsControllerGetTranslations({ ...fetcherOptions, ...variables }, signal),
		{
			...options,
			...queryOptions,
		}
	);
};

export type TranslationsControllerUpdateTranslationsError = Fetcher.ErrorWrapper<undefined>;

export type TranslationsControllerUpdateTranslationsVariables = {
	body: Schemas.UpdateTranslationsDto;
} & ServerContext['fetcherOptions'];

/**
 * Set translations for the specified key. Careful: this overwrites all existing values.
 */
export const fetchTranslationsControllerUpdateTranslations = (
	variables: TranslationsControllerUpdateTranslationsVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		TranslationsControllerUpdateTranslationsError,
		Schemas.UpdateTranslationsDto,
		{},
		{},
		{}
	>({ url: '/admin/translations', method: 'post', ...variables, signal });

/**
 * Set translations for the specified key. Careful: this overwrites all existing values.
 */
export const useTranslationsControllerUpdateTranslations = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			TranslationsControllerUpdateTranslationsError,
			TranslationsControllerUpdateTranslationsVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useServerContext();
	return reactQuery.useMutation<
		undefined,
		TranslationsControllerUpdateTranslationsError,
		TranslationsControllerUpdateTranslationsVariables
	>(
		(variables: TranslationsControllerUpdateTranslationsVariables) =>
			fetchTranslationsControllerUpdateTranslations({ ...fetcherOptions, ...variables }),
		options
	);
};

export type UserGroupsControllerGetUserGroupsQueryParams = {
	withPermissions: string;
};

export type UserGroupsControllerGetUserGroupsError = Fetcher.ErrorWrapper<undefined>;

export type UserGroupsControllerGetUserGroupsVariables = {
	queryParams: UserGroupsControllerGetUserGroupsQueryParams;
} & ServerContext['fetcherOptions'];

export const fetchUserGroupsControllerGetUserGroups = (
	variables: UserGroupsControllerGetUserGroupsVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		UserGroupsControllerGetUserGroupsError,
		undefined,
		{},
		UserGroupsControllerGetUserGroupsQueryParams,
		{}
	>({ url: '/admin/user-groups', method: 'get', ...variables, signal });

export const useUserGroupsControllerGetUserGroups = <TData = undefined>(
	variables: UserGroupsControllerGetUserGroupsVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<undefined, UserGroupsControllerGetUserGroupsError, TData>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, UserGroupsControllerGetUserGroupsError, TData>(
		queryKeyFn({
			path: '/admin/user-groups',
			operationId: 'userGroupsControllerGetUserGroups',
			variables,
		}),
		({ signal }) =>
			fetchUserGroupsControllerGetUserGroups({ ...fetcherOptions, ...variables }, signal),
		{
			...options,
			...queryOptions,
		}
	);
};

export type UserGroupsControllerUpdateUserGroupsError = Fetcher.ErrorWrapper<undefined>;

export type UserGroupsControllerUpdateUserGroupsVariables = {
	body: Schemas.UpdateUserGroupsDto;
} & ServerContext['fetcherOptions'];

export const fetchUserGroupsControllerUpdateUserGroups = (
	variables: UserGroupsControllerUpdateUserGroupsVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		UserGroupsControllerUpdateUserGroupsError,
		Schemas.UpdateUserGroupsDto,
		{},
		{},
		{}
	>({ url: '/admin/user-groups', method: 'patch', ...variables, signal });

export const useUserGroupsControllerUpdateUserGroups = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			UserGroupsControllerUpdateUserGroupsError,
			UserGroupsControllerUpdateUserGroupsVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useServerContext();
	return reactQuery.useMutation<
		undefined,
		UserGroupsControllerUpdateUserGroupsError,
		UserGroupsControllerUpdateUserGroupsVariables
	>(
		(variables: UserGroupsControllerUpdateUserGroupsVariables) =>
			fetchUserGroupsControllerUpdateUserGroups({ ...fetcherOptions, ...variables }),
		options
	);
};

export type ContentPageLabelsControllerFetchContentPageLabelsQueryParams = {
	offset: string;
	limit: string;
	sortColumn: string;
	sortOrder: string;
	where: string;
};

export type ContentPageLabelsControllerFetchContentPageLabelsError =
	Fetcher.ErrorWrapper<undefined>;

export type ContentPageLabelsControllerFetchContentPageLabelsVariables = {
	queryParams: ContentPageLabelsControllerFetchContentPageLabelsQueryParams;
} & ServerContext['fetcherOptions'];

export const fetchContentPageLabelsControllerFetchContentPageLabels = (
	variables: ContentPageLabelsControllerFetchContentPageLabelsVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		ContentPageLabelsControllerFetchContentPageLabelsError,
		undefined,
		{},
		ContentPageLabelsControllerFetchContentPageLabelsQueryParams,
		{}
	>({ url: '/admin/content-page-labels', method: 'get', ...variables, signal });

export const useContentPageLabelsControllerFetchContentPageLabels = <TData = undefined>(
	variables: ContentPageLabelsControllerFetchContentPageLabelsVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			undefined,
			ContentPageLabelsControllerFetchContentPageLabelsError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<
		undefined,
		ContentPageLabelsControllerFetchContentPageLabelsError,
		TData
	>(
		queryKeyFn({
			path: '/admin/content-page-labels',
			operationId: 'contentPageLabelsControllerFetchContentPageLabels',
			variables,
		}),
		({ signal }) =>
			fetchContentPageLabelsControllerFetchContentPageLabels(
				{ ...fetcherOptions, ...variables },
				signal
			),
		{
			...options,
			...queryOptions,
		}
	);
};

export type ContentPageLabelsControllerInsertContentPageLabelError =
	Fetcher.ErrorWrapper<undefined>;

export type ContentPageLabelsControllerInsertContentPageLabelVariables =
	ServerContext['fetcherOptions'];

export const fetchContentPageLabelsControllerInsertContentPageLabel = (
	variables: ContentPageLabelsControllerInsertContentPageLabelVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		ContentPageLabelsControllerInsertContentPageLabelError,
		undefined,
		{},
		{},
		{}
	>({ url: '/admin/content-page-labels', method: 'put', ...variables, signal });

export const useContentPageLabelsControllerInsertContentPageLabel = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ContentPageLabelsControllerInsertContentPageLabelError,
			ContentPageLabelsControllerInsertContentPageLabelVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useServerContext();
	return reactQuery.useMutation<
		undefined,
		ContentPageLabelsControllerInsertContentPageLabelError,
		ContentPageLabelsControllerInsertContentPageLabelVariables
	>(
		(variables: ContentPageLabelsControllerInsertContentPageLabelVariables) =>
			fetchContentPageLabelsControllerInsertContentPageLabel({
				...fetcherOptions,
				...variables,
			}),
		options
	);
};

export type ContentPageLabelsControllerUpdateContentPageLabelError =
	Fetcher.ErrorWrapper<undefined>;

export type ContentPageLabelsControllerUpdateContentPageLabelVariables =
	ServerContext['fetcherOptions'];

export const fetchContentPageLabelsControllerUpdateContentPageLabel = (
	variables: ContentPageLabelsControllerUpdateContentPageLabelVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		ContentPageLabelsControllerUpdateContentPageLabelError,
		undefined,
		{},
		{},
		{}
	>({ url: '/admin/content-page-labels', method: 'patch', ...variables, signal });

export const useContentPageLabelsControllerUpdateContentPageLabel = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ContentPageLabelsControllerUpdateContentPageLabelError,
			ContentPageLabelsControllerUpdateContentPageLabelVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useServerContext();
	return reactQuery.useMutation<
		undefined,
		ContentPageLabelsControllerUpdateContentPageLabelError,
		ContentPageLabelsControllerUpdateContentPageLabelVariables
	>(
		(variables: ContentPageLabelsControllerUpdateContentPageLabelVariables) =>
			fetchContentPageLabelsControllerUpdateContentPageLabel({
				...fetcherOptions,
				...variables,
			}),
		options
	);
};

export type ContentPageLabelsControllerGetContentPageLabelsByTypeError =
	Fetcher.ErrorWrapper<undefined>;

export type ContentPageLabelsControllerGetContentPageLabelsByTypeVariables = {
	body?: Schemas.ContentLabelsRequestDto;
} & ServerContext['fetcherOptions'];

export const fetchContentPageLabelsControllerGetContentPageLabelsByType = (
	variables: ContentPageLabelsControllerGetContentPageLabelsByTypeVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		ContentPageLabelsControllerGetContentPageLabelsByTypeError,
		Schemas.ContentLabelsRequestDto,
		{},
		{},
		{}
	>({ url: '/admin/content-page-labels', method: 'post', ...variables, signal });

export const useContentPageLabelsControllerGetContentPageLabelsByType = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ContentPageLabelsControllerGetContentPageLabelsByTypeError,
			ContentPageLabelsControllerGetContentPageLabelsByTypeVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useServerContext();
	return reactQuery.useMutation<
		undefined,
		ContentPageLabelsControllerGetContentPageLabelsByTypeError,
		ContentPageLabelsControllerGetContentPageLabelsByTypeVariables
	>(
		(variables: ContentPageLabelsControllerGetContentPageLabelsByTypeVariables) =>
			fetchContentPageLabelsControllerGetContentPageLabelsByType({
				...fetcherOptions,
				...variables,
			}),
		options
	);
};

export type ContentPagesControllerGetContentPagesForOverviewError = Fetcher.ErrorWrapper<undefined>;

export type ContentPagesControllerGetContentPagesForOverviewVariables = {
	body: Schemas.ContentPageOverviewParams;
} & ServerContext['fetcherOptions'];

export const fetchContentPagesControllerGetContentPagesForOverview = (
	variables: ContentPagesControllerGetContentPagesForOverviewVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		ContentPagesControllerGetContentPagesForOverviewError,
		Schemas.ContentPageOverviewParams,
		{},
		{},
		{}
	>({ url: '/admin/content-pages', method: 'post', ...variables, signal });

export const useContentPagesControllerGetContentPagesForOverview = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ContentPagesControllerGetContentPagesForOverviewError,
			ContentPagesControllerGetContentPagesForOverviewVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useServerContext();
	return reactQuery.useMutation<
		undefined,
		ContentPagesControllerGetContentPagesForOverviewError,
		ContentPagesControllerGetContentPagesForOverviewVariables
	>(
		(variables: ContentPagesControllerGetContentPagesForOverviewVariables) =>
			fetchContentPagesControllerGetContentPagesForOverview({
				...fetcherOptions,
				...variables,
			}),
		options
	);
};

export type ContentPagesControllerGetContentPageByPathQueryParams = {
	path: string;
};

export type ContentPagesControllerGetContentPageByPathError = Fetcher.ErrorWrapper<undefined>;

export type ContentPagesControllerGetContentPageByPathVariables = {
	queryParams: ContentPagesControllerGetContentPageByPathQueryParams;
} & ServerContext['fetcherOptions'];

export const fetchContentPagesControllerGetContentPageByPath = (
	variables: ContentPagesControllerGetContentPageByPathVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		ContentPagesControllerGetContentPageByPathError,
		undefined,
		{},
		ContentPagesControllerGetContentPageByPathQueryParams,
		{}
	>({ url: '/admin/content-pages', method: 'get', ...variables, signal });

export const useContentPagesControllerGetContentPageByPath = <TData = undefined>(
	variables: ContentPagesControllerGetContentPageByPathVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			undefined,
			ContentPagesControllerGetContentPageByPathError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, ContentPagesControllerGetContentPageByPathError, TData>(
		queryKeyFn({
			path: '/admin/content-pages',
			operationId: 'contentPagesControllerGetContentPageByPath',
			variables,
		}),
		({ signal }) =>
			fetchContentPagesControllerGetContentPageByPath(
				{ ...fetcherOptions, ...variables },
				signal
			),
		{
			...options,
			...queryOptions,
		}
	);
};

export type ContentPagesControllerInsertContentPageError = Fetcher.ErrorWrapper<undefined>;

export type ContentPagesControllerInsertContentPageVariables = ServerContext['fetcherOptions'];

export const fetchContentPagesControllerInsertContentPage = (
	variables: ContentPagesControllerInsertContentPageVariables,
	signal?: AbortSignal
) =>
	serverFetch<undefined, ContentPagesControllerInsertContentPageError, undefined, {}, {}, {}>({
		url: '/admin/content-pages',
		method: 'put',
		...variables,
		signal,
	});

export const useContentPagesControllerInsertContentPage = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ContentPagesControllerInsertContentPageError,
			ContentPagesControllerInsertContentPageVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useServerContext();
	return reactQuery.useMutation<
		undefined,
		ContentPagesControllerInsertContentPageError,
		ContentPagesControllerInsertContentPageVariables
	>(
		(variables: ContentPagesControllerInsertContentPageVariables) =>
			fetchContentPagesControllerInsertContentPage({ ...fetcherOptions, ...variables }),
		options
	);
};

export type ContentPagesControllerUpdateContentPageError = Fetcher.ErrorWrapper<undefined>;

export type ContentPagesControllerUpdateContentPageVariables = ServerContext['fetcherOptions'];

export const fetchContentPagesControllerUpdateContentPage = (
	variables: ContentPagesControllerUpdateContentPageVariables,
	signal?: AbortSignal
) =>
	serverFetch<undefined, ContentPagesControllerUpdateContentPageError, undefined, {}, {}, {}>({
		url: '/admin/content-pages',
		method: 'patch',
		...variables,
		signal,
	});

export const useContentPagesControllerUpdateContentPage = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ContentPagesControllerUpdateContentPageError,
			ContentPagesControllerUpdateContentPageVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useServerContext();
	return reactQuery.useMutation<
		undefined,
		ContentPagesControllerUpdateContentPageError,
		ContentPagesControllerUpdateContentPageVariables
	>(
		(variables: ContentPagesControllerUpdateContentPageVariables) =>
			fetchContentPagesControllerUpdateContentPage({ ...fetcherOptions, ...variables }),
		options
	);
};

export type ContentPagesControllerFetchContentPagesQueryParams = {
	offset: number;
	limit: number;
	sortColumn: string;
	sortOrder: string;
	tableColumnDataType: string;
	where: string;
};

export type ContentPagesControllerFetchContentPagesError = Fetcher.ErrorWrapper<undefined>;

export type ContentPagesControllerFetchContentPagesVariables = {
	queryParams: ContentPagesControllerFetchContentPagesQueryParams;
} & ServerContext['fetcherOptions'];

export const fetchContentPagesControllerFetchContentPages = (
	variables: ContentPagesControllerFetchContentPagesVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		ContentPagesControllerFetchContentPagesError,
		undefined,
		{},
		ContentPagesControllerFetchContentPagesQueryParams,
		{}
	>({ url: '/admin/content-pages/overview', method: 'get', ...variables, signal });

export const useContentPagesControllerFetchContentPages = <TData = undefined>(
	variables: ContentPagesControllerFetchContentPagesVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<undefined, ContentPagesControllerFetchContentPagesError, TData>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, ContentPagesControllerFetchContentPagesError, TData>(
		queryKeyFn({
			path: '/admin/content-pages/overview',
			operationId: 'contentPagesControllerFetchContentPages',
			variables,
		}),
		({ signal }) =>
			fetchContentPagesControllerFetchContentPages(
				{ ...fetcherOptions, ...variables },
				signal
			),
		{
			...options,
			...queryOptions,
		}
	);
};

export type ContentPagesControllerDoesContentPageExistQueryParams = {
	path: string;
};

export type ContentPagesControllerDoesContentPageExistError = Fetcher.ErrorWrapper<undefined>;

export type ContentPagesControllerDoesContentPageExistVariables = {
	queryParams: ContentPagesControllerDoesContentPageExistQueryParams;
} & ServerContext['fetcherOptions'];

export const fetchContentPagesControllerDoesContentPageExist = (
	variables: ContentPagesControllerDoesContentPageExistVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		ContentPagesControllerDoesContentPageExistError,
		undefined,
		{},
		ContentPagesControllerDoesContentPageExistQueryParams,
		{}
	>({ url: '/admin/content-pages/path-exists', method: 'get', ...variables, signal });

export const useContentPagesControllerDoesContentPageExist = <TData = undefined>(
	variables: ContentPagesControllerDoesContentPageExistVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			undefined,
			ContentPagesControllerDoesContentPageExistError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, ContentPagesControllerDoesContentPageExistError, TData>(
		queryKeyFn({
			path: '/admin/content-pages/path-exists',
			operationId: 'contentPagesControllerDoesContentPageExist',
			variables,
		}),
		({ signal }) =>
			fetchContentPagesControllerDoesContentPageExist(
				{ ...fetcherOptions, ...variables },
				signal
			),
		{
			...options,
			...queryOptions,
		}
	);
};

export type ContentPagesControllerUpdatePublishDatesHeaders = {
	apikey: string;
};

export type ContentPagesControllerUpdatePublishDatesError = Fetcher.ErrorWrapper<undefined>;

export type ContentPagesControllerUpdatePublishDatesVariables = {
	headers: ContentPagesControllerUpdatePublishDatesHeaders;
} & ServerContext['fetcherOptions'];

export const fetchContentPagesControllerUpdatePublishDates = (
	variables: ContentPagesControllerUpdatePublishDatesVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		ContentPagesControllerUpdatePublishDatesError,
		undefined,
		ContentPagesControllerUpdatePublishDatesHeaders,
		{},
		{}
	>({ url: '/admin/content-pages/update-published-dates', method: 'post', ...variables, signal });

export const useContentPagesControllerUpdatePublishDates = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ContentPagesControllerUpdatePublishDatesError,
			ContentPagesControllerUpdatePublishDatesVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useServerContext();
	return reactQuery.useMutation<
		undefined,
		ContentPagesControllerUpdatePublishDatesError,
		ContentPagesControllerUpdatePublishDatesVariables
	>(
		(variables: ContentPagesControllerUpdatePublishDatesVariables) =>
			fetchContentPagesControllerUpdatePublishDates({ ...fetcherOptions, ...variables }),
		options
	);
};

export type ContentPagesControllerGetPublicContentItemsQueryParams = {
	limit: number;
	title: string;
};

export type ContentPagesControllerGetPublicContentItemsError = Fetcher.ErrorWrapper<undefined>;

export type ContentPagesControllerGetPublicContentItemsVariables = {
	queryParams: ContentPagesControllerGetPublicContentItemsQueryParams;
} & ServerContext['fetcherOptions'];

export const fetchContentPagesControllerGetPublicContentItems = (
	variables: ContentPagesControllerGetPublicContentItemsVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		ContentPagesControllerGetPublicContentItemsError,
		undefined,
		{},
		ContentPagesControllerGetPublicContentItemsQueryParams,
		{}
	>({ url: '/admin/content-pages/public', method: 'get', ...variables, signal });

export const useContentPagesControllerGetPublicContentItems = <TData = undefined>(
	variables: ContentPagesControllerGetPublicContentItemsVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			undefined,
			ContentPagesControllerGetPublicContentItemsError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, ContentPagesControllerGetPublicContentItemsError, TData>(
		queryKeyFn({
			path: '/admin/content-pages/public',
			operationId: 'contentPagesControllerGetPublicContentItems',
			variables,
		}),
		({ signal }) =>
			fetchContentPagesControllerGetPublicContentItems(
				{ ...fetcherOptions, ...variables },
				signal
			),
		{
			...options,
			...queryOptions,
		}
	);
};

export type ContentPagesControllerGetPublicProjectContentItemsQueryParams = {
	limit: number;
	title: string;
};

export type ContentPagesControllerGetPublicProjectContentItemsError =
	Fetcher.ErrorWrapper<undefined>;

export type ContentPagesControllerGetPublicProjectContentItemsVariables = {
	queryParams: ContentPagesControllerGetPublicProjectContentItemsQueryParams;
} & ServerContext['fetcherOptions'];

export const fetchContentPagesControllerGetPublicProjectContentItems = (
	variables: ContentPagesControllerGetPublicProjectContentItemsVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		ContentPagesControllerGetPublicProjectContentItemsError,
		undefined,
		{},
		ContentPagesControllerGetPublicProjectContentItemsQueryParams,
		{}
	>({ url: '/admin/content-pages/projects/public', method: 'get', ...variables, signal });

export const useContentPagesControllerGetPublicProjectContentItems = <TData = undefined>(
	variables: ContentPagesControllerGetPublicProjectContentItemsVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			undefined,
			ContentPagesControllerGetPublicProjectContentItemsError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<
		undefined,
		ContentPagesControllerGetPublicProjectContentItemsError,
		TData
	>(
		queryKeyFn({
			path: '/admin/content-pages/projects/public',
			operationId: 'contentPagesControllerGetPublicProjectContentItems',
			variables,
		}),
		({ signal }) =>
			fetchContentPagesControllerGetPublicProjectContentItems(
				{ ...fetcherOptions, ...variables },
				signal
			),
		{
			...options,
			...queryOptions,
		}
	);
};

export type ContentPagesControllerFetchLabelsByContentTypeQueryParams = {
	contentType: string;
};

export type ContentPagesControllerFetchLabelsByContentTypeError = Fetcher.ErrorWrapper<undefined>;

export type ContentPagesControllerFetchLabelsByContentTypeVariables = {
	queryParams: ContentPagesControllerFetchLabelsByContentTypeQueryParams;
} & ServerContext['fetcherOptions'];

export const fetchContentPagesControllerFetchLabelsByContentType = (
	variables: ContentPagesControllerFetchLabelsByContentTypeVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		ContentPagesControllerFetchLabelsByContentTypeError,
		undefined,
		{},
		ContentPagesControllerFetchLabelsByContentTypeQueryParams,
		{}
	>({ url: '/admin/content-pages/labels', method: 'get', ...variables, signal });

export const useContentPagesControllerFetchLabelsByContentType = <TData = undefined>(
	variables: ContentPagesControllerFetchLabelsByContentTypeVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			undefined,
			ContentPagesControllerFetchLabelsByContentTypeError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<
		undefined,
		ContentPagesControllerFetchLabelsByContentTypeError,
		TData
	>(
		queryKeyFn({
			path: '/admin/content-pages/labels',
			operationId: 'contentPagesControllerFetchLabelsByContentType',
			variables,
		}),
		({ signal }) =>
			fetchContentPagesControllerFetchLabelsByContentType(
				{ ...fetcherOptions, ...variables },
				signal
			),
		{
			...options,
			...queryOptions,
		}
	);
};

export type ContentPagesControllerInsertContentLabelsLinksError = Fetcher.ErrorWrapper<undefined>;

export type ContentPagesControllerInsertContentLabelsLinksVariables =
	ServerContext['fetcherOptions'];

export const fetchContentPagesControllerInsertContentLabelsLinks = (
	variables: ContentPagesControllerInsertContentLabelsLinksVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		ContentPagesControllerInsertContentLabelsLinksError,
		undefined,
		{},
		{},
		{}
	>({ url: '/admin/content-pages/labels', method: 'put', ...variables, signal });

export const useContentPagesControllerInsertContentLabelsLinks = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ContentPagesControllerInsertContentLabelsLinksError,
			ContentPagesControllerInsertContentLabelsLinksVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useServerContext();
	return reactQuery.useMutation<
		undefined,
		ContentPagesControllerInsertContentLabelsLinksError,
		ContentPagesControllerInsertContentLabelsLinksVariables
	>(
		(variables: ContentPagesControllerInsertContentLabelsLinksVariables) =>
			fetchContentPagesControllerInsertContentLabelsLinks({
				...fetcherOptions,
				...variables,
			}),
		options
	);
};

export type ContentPagesControllerDeleteContentLabelsLinksError = Fetcher.ErrorWrapper<undefined>;

export type ContentPagesControllerDeleteContentLabelsLinksVariables =
	ServerContext['fetcherOptions'];

export const fetchContentPagesControllerDeleteContentLabelsLinks = (
	variables: ContentPagesControllerDeleteContentLabelsLinksVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		ContentPagesControllerDeleteContentLabelsLinksError,
		undefined,
		{},
		{},
		{}
	>({ url: '/admin/content-pages/labels', method: 'delete', ...variables, signal });

export const useContentPagesControllerDeleteContentLabelsLinks = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ContentPagesControllerDeleteContentLabelsLinksError,
			ContentPagesControllerDeleteContentLabelsLinksVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useServerContext();
	return reactQuery.useMutation<
		undefined,
		ContentPagesControllerDeleteContentLabelsLinksError,
		ContentPagesControllerDeleteContentLabelsLinksVariables
	>(
		(variables: ContentPagesControllerDeleteContentLabelsLinksVariables) =>
			fetchContentPagesControllerDeleteContentLabelsLinks({
				...fetcherOptions,
				...variables,
			}),
		options
	);
};

export type ContentPagesControllerGetContentTypesError = Fetcher.ErrorWrapper<undefined>;

export type ContentPagesControllerGetContentTypesResponse = Schemas.ContentPageTypeDto[];

export type ContentPagesControllerGetContentTypesVariables = ServerContext['fetcherOptions'];

/**
 * Get list of content page types
 */
export const fetchContentPagesControllerGetContentTypes = (
	variables: ContentPagesControllerGetContentTypesVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		ContentPagesControllerGetContentTypesResponse,
		ContentPagesControllerGetContentTypesError,
		undefined,
		{},
		{},
		{}
	>({ url: '/admin/content-pages/types', method: 'get', ...variables, signal });

/**
 * Get list of content page types
 */
export const useContentPagesControllerGetContentTypes = <
	TData = ContentPagesControllerGetContentTypesResponse
>(
	variables: ContentPagesControllerGetContentTypesVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			ContentPagesControllerGetContentTypesResponse,
			ContentPagesControllerGetContentTypesError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<
		ContentPagesControllerGetContentTypesResponse,
		ContentPagesControllerGetContentTypesError,
		TData
	>(
		queryKeyFn({
			path: '/admin/content-pages/types',
			operationId: 'contentPagesControllerGetContentTypes',
			variables,
		}),
		({ signal }) =>
			fetchContentPagesControllerGetContentTypes({ ...fetcherOptions, ...variables }, signal),
		{
			...options,
			...queryOptions,
		}
	);
};

export type ContentPagesControllerDeleteContentPagePathParams = {
	id: string;
};

export type ContentPagesControllerDeleteContentPageError = Fetcher.ErrorWrapper<undefined>;

export type ContentPagesControllerDeleteContentPageVariables = {
	pathParams: ContentPagesControllerDeleteContentPagePathParams;
} & ServerContext['fetcherOptions'];

export const fetchContentPagesControllerDeleteContentPage = (
	variables: ContentPagesControllerDeleteContentPageVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		ContentPagesControllerDeleteContentPageError,
		undefined,
		{},
		{},
		ContentPagesControllerDeleteContentPagePathParams
	>({ url: '/admin/content-pages/{id}', method: 'delete', ...variables, signal });

export const useContentPagesControllerDeleteContentPage = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ContentPagesControllerDeleteContentPageError,
			ContentPagesControllerDeleteContentPageVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useServerContext();
	return reactQuery.useMutation<
		undefined,
		ContentPagesControllerDeleteContentPageError,
		ContentPagesControllerDeleteContentPageVariables
	>(
		(variables: ContentPagesControllerDeleteContentPageVariables) =>
			fetchContentPagesControllerDeleteContentPage({ ...fetcherOptions, ...variables }),
		options
	);
};

export type ContentPagesControllerGetContentPageByIdPathParams = {
	id: string;
};

export type ContentPagesControllerGetContentPageByIdError = Fetcher.ErrorWrapper<undefined>;

export type ContentPagesControllerGetContentPageByIdVariables = {
	pathParams: ContentPagesControllerGetContentPageByIdPathParams;
} & ServerContext['fetcherOptions'];

export const fetchContentPagesControllerGetContentPageById = (
	variables: ContentPagesControllerGetContentPageByIdVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		ContentPagesControllerGetContentPageByIdError,
		undefined,
		{},
		{},
		ContentPagesControllerGetContentPageByIdPathParams
	>({ url: '/admin/content-pages/{id}', method: 'get', ...variables, signal });

export const useContentPagesControllerGetContentPageById = <TData = undefined>(
	variables: ContentPagesControllerGetContentPageByIdVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<undefined, ContentPagesControllerGetContentPageByIdError, TData>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, ContentPagesControllerGetContentPageByIdError, TData>(
		queryKeyFn({
			path: '/admin/content-pages/{id}',
			operationId: 'contentPagesControllerGetContentPageById',
			variables,
		}),
		({ signal }) =>
			fetchContentPagesControllerGetContentPageById(
				{ ...fetcherOptions, ...variables },
				signal
			),
		{
			...options,
			...queryOptions,
		}
	);
};

export type ContentPagesControllerGetUserGroupsFromContentPageQueryParams = {
	path: string;
};

export type ContentPagesControllerGetUserGroupsFromContentPageError =
	Fetcher.ErrorWrapper<undefined>;

export type ContentPagesControllerGetUserGroupsFromContentPageVariables = {
	queryParams: ContentPagesControllerGetUserGroupsFromContentPageQueryParams;
} & ServerContext['fetcherOptions'];

export const fetchContentPagesControllerGetUserGroupsFromContentPage = (
	variables: ContentPagesControllerGetUserGroupsFromContentPageVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		ContentPagesControllerGetUserGroupsFromContentPageError,
		undefined,
		{},
		ContentPagesControllerGetUserGroupsFromContentPageQueryParams,
		{}
	>({ url: '/admin/content-pages/access', method: 'get', ...variables, signal });

export const useContentPagesControllerGetUserGroupsFromContentPage = <TData = undefined>(
	variables: ContentPagesControllerGetUserGroupsFromContentPageVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			undefined,
			ContentPagesControllerGetUserGroupsFromContentPageError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<
		undefined,
		ContentPagesControllerGetUserGroupsFromContentPageError,
		TData
	>(
		queryKeyFn({
			path: '/admin/content-pages/access',
			operationId: 'contentPagesControllerGetUserGroupsFromContentPage',
			variables,
		}),
		({ signal }) =>
			fetchContentPagesControllerGetUserGroupsFromContentPage(
				{ ...fetcherOptions, ...variables },
				signal
			),
		{
			...options,
			...queryOptions,
		}
	);
};

export type PlayerTicketControllerGetPlayableUrlQueryParams = {
	/**
	 * The external id (avo) or SchemaIdentifier (hetarchief) of the media item you want to view. externalId, externalIds or browsePath is required.
	 */
	externalId?: string;
	/**
	 * Comma separated list of external ids (avo) or SchemaIdentifiers (hetarchief) of the media items you want to view. externalId, externalIds or browsePath is required.
	 */
	externalIds?: string;
	/**
	 * The browse path of the media item you want to view. externalId, externalIds or browsePath is required.
	 */
	browsePath?: string;
};

export type PlayerTicketControllerGetPlayableUrlError = Fetcher.ErrorWrapper<undefined>;

export type PlayerTicketControllerGetPlayableUrlVariables = {
	queryParams?: PlayerTicketControllerGetPlayableUrlQueryParams;
} & ServerContext['fetcherOptions'];

export const fetchPlayerTicketControllerGetPlayableUrl = (
	variables: PlayerTicketControllerGetPlayableUrlVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		PlayerTicketControllerGetPlayableUrlError,
		undefined,
		{},
		PlayerTicketControllerGetPlayableUrlQueryParams,
		{}
	>({ url: '/admin/player-ticket', method: 'get', ...variables, signal });

export const usePlayerTicketControllerGetPlayableUrl = <TData = undefined>(
	variables: PlayerTicketControllerGetPlayableUrlVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<undefined, PlayerTicketControllerGetPlayableUrlError, TData>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, PlayerTicketControllerGetPlayableUrlError, TData>(
		queryKeyFn({
			path: '/admin/player-ticket',
			operationId: 'playerTicketControllerGetPlayableUrl',
			variables,
		}),
		({ signal }) =>
			fetchPlayerTicketControllerGetPlayableUrl({ ...fetcherOptions, ...variables }, signal),
		{
			...options,
			...queryOptions,
		}
	);
};

export type LookupControllerFetchSubjectsError = Fetcher.ErrorWrapper<undefined>;

export type LookupControllerFetchSubjectsVariables = ServerContext['fetcherOptions'];

export const fetchLookupControllerFetchSubjects = (
	variables: LookupControllerFetchSubjectsVariables,
	signal?: AbortSignal
) =>
	serverFetch<undefined, LookupControllerFetchSubjectsError, undefined, {}, {}, {}>({
		url: '/admin/lookup/subjects',
		method: 'get',
		...variables,
		signal,
	});

export const useLookupControllerFetchSubjects = <TData = undefined>(
	variables: LookupControllerFetchSubjectsVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<undefined, LookupControllerFetchSubjectsError, TData>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, LookupControllerFetchSubjectsError, TData>(
		queryKeyFn({
			path: '/admin/lookup/subjects',
			operationId: 'lookupControllerFetchSubjects',
			variables,
		}),
		({ signal }) =>
			fetchLookupControllerFetchSubjects({ ...fetcherOptions, ...variables }, signal),
		{
			...options,
			...queryOptions,
		}
	);
};

export type LookupControllerFetchEducationLevelsError = Fetcher.ErrorWrapper<undefined>;

export type LookupControllerFetchEducationLevelsVariables = ServerContext['fetcherOptions'];

export const fetchLookupControllerFetchEducationLevels = (
	variables: LookupControllerFetchEducationLevelsVariables,
	signal?: AbortSignal
) =>
	serverFetch<undefined, LookupControllerFetchEducationLevelsError, undefined, {}, {}, {}>({
		url: '/admin/lookup/education-levels',
		method: 'get',
		...variables,
		signal,
	});

export const useLookupControllerFetchEducationLevels = <TData = undefined>(
	variables: LookupControllerFetchEducationLevelsVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<undefined, LookupControllerFetchEducationLevelsError, TData>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, LookupControllerFetchEducationLevelsError, TData>(
		queryKeyFn({
			path: '/admin/lookup/education-levels',
			operationId: 'lookupControllerFetchEducationLevels',
			variables,
		}),
		({ signal }) =>
			fetchLookupControllerFetchEducationLevels({ ...fetcherOptions, ...variables }, signal),
		{
			...options,
			...queryOptions,
		}
	);
};

export type StatusControllerGetStatusRootError = Fetcher.ErrorWrapper<undefined>;

export type StatusControllerGetStatusRootVariables = ServerContext['fetcherOptions'];

/**
 * Get the status of the service
 */
export const fetchStatusControllerGetStatusRoot = (
	variables: StatusControllerGetStatusRootVariables,
	signal?: AbortSignal
) =>
	serverFetch<undefined, StatusControllerGetStatusRootError, undefined, {}, {}, {}>({
		url: '/',
		method: 'get',
		...variables,
		signal,
	});

/**
 * Get the status of the service
 */
export const useStatusControllerGetStatusRoot = <TData = undefined>(
	variables: StatusControllerGetStatusRootVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<undefined, StatusControllerGetStatusRootError, TData>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, StatusControllerGetStatusRootError, TData>(
		queryKeyFn({ path: '/', operationId: 'statusControllerGetStatusRoot', variables }),
		({ signal }) =>
			fetchStatusControllerGetStatusRoot({ ...fetcherOptions, ...variables }, signal),
		{
			...options,
			...queryOptions,
		}
	);
};

export type StatusControllerGetStatusError = Fetcher.ErrorWrapper<undefined>;

export type StatusControllerGetStatusVariables = ServerContext['fetcherOptions'];

/**
 * Get the status of the service
 */
export const fetchStatusControllerGetStatus = (
	variables: StatusControllerGetStatusVariables,
	signal?: AbortSignal
) =>
	serverFetch<undefined, StatusControllerGetStatusError, undefined, {}, {}, {}>({
		url: '/status',
		method: 'get',
		...variables,
		signal,
	});

/**
 * Get the status of the service
 */
export const useStatusControllerGetStatus = <TData = undefined>(
	variables: StatusControllerGetStatusVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<undefined, StatusControllerGetStatusError, TData>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, StatusControllerGetStatusError, TData>(
		queryKeyFn({ path: '/status', operationId: 'statusControllerGetStatus', variables }),
		({ signal }) => fetchStatusControllerGetStatus({ ...fetcherOptions, ...variables }, signal),
		{
			...options,
			...queryOptions,
		}
	);
};

export type StatusControllerGetStatusFullError = Fetcher.ErrorWrapper<undefined>;

export type StatusControllerGetStatusFullVariables = ServerContext['fetcherOptions'];

/**
 * Get the status of the service including the databases
 */
export const fetchStatusControllerGetStatusFull = (
	variables: StatusControllerGetStatusFullVariables,
	signal?: AbortSignal
) =>
	serverFetch<undefined, StatusControllerGetStatusFullError, undefined, {}, {}, {}>({
		url: '/status-full',
		method: 'get',
		...variables,
		signal,
	});

/**
 * Get the status of the service including the databases
 */
export const useStatusControllerGetStatusFull = <TData = undefined>(
	variables: StatusControllerGetStatusFullVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<undefined, StatusControllerGetStatusFullError, TData>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, StatusControllerGetStatusFullError, TData>(
		queryKeyFn({
			path: '/status-full',
			operationId: 'statusControllerGetStatusFull',
			variables,
		}),
		({ signal }) =>
			fetchStatusControllerGetStatusFull({ ...fetcherOptions, ...variables }, signal),
		{
			...options,
			...queryOptions,
		}
	);
};

export type UsersControllerGetProfilesQueryParams = {
	offset: string;
	limit: string;
	sortColumn: string;
	sortOrder: string;
	tableColumnDataType: string;
};

export type UsersControllerGetProfilesError = Fetcher.ErrorWrapper<undefined>;

export type UsersControllerGetProfilesVariables = {
	queryParams: UsersControllerGetProfilesQueryParams;
} & ServerContext['fetcherOptions'];

export const fetchUsersControllerGetProfiles = (
	variables: UsersControllerGetProfilesVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		UsersControllerGetProfilesError,
		undefined,
		{},
		UsersControllerGetProfilesQueryParams,
		{}
	>({ url: '/admin/users', method: 'get', ...variables, signal });

export const useUsersControllerGetProfiles = <TData = undefined>(
	variables: UsersControllerGetProfilesVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<undefined, UsersControllerGetProfilesError, TData>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, UsersControllerGetProfilesError, TData>(
		queryKeyFn({ path: '/admin/users', operationId: 'usersControllerGetProfiles', variables }),
		({ signal }) =>
			fetchUsersControllerGetProfiles({ ...fetcherOptions, ...variables }, signal),
		{
			...options,
			...queryOptions,
		}
	);
};

export type UsersControllerGetNamesByProfileIdsQueryParams = {
	profileIds: string[];
};

export type UsersControllerGetNamesByProfileIdsError = Fetcher.ErrorWrapper<undefined>;

export type UsersControllerGetNamesByProfileIdsVariables = {
	queryParams: UsersControllerGetNamesByProfileIdsQueryParams;
} & ServerContext['fetcherOptions'];

export const fetchUsersControllerGetNamesByProfileIds = (
	variables: UsersControllerGetNamesByProfileIdsVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		UsersControllerGetNamesByProfileIdsError,
		undefined,
		{},
		UsersControllerGetNamesByProfileIdsQueryParams,
		{}
	>({ url: '/admin/users/names', method: 'get', ...variables, signal });

export const useUsersControllerGetNamesByProfileIds = <TData = undefined>(
	variables: UsersControllerGetNamesByProfileIdsVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<undefined, UsersControllerGetNamesByProfileIdsError, TData>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, UsersControllerGetNamesByProfileIdsError, TData>(
		queryKeyFn({
			path: '/admin/users/names',
			operationId: 'usersControllerGetNamesByProfileIds',
			variables,
		}),
		({ signal }) =>
			fetchUsersControllerGetNamesByProfileIds({ ...fetcherOptions, ...variables }, signal),
		{
			...options,
			...queryOptions,
		}
	);
};

export type UsersControllerGetProfileIdsError = Fetcher.ErrorWrapper<undefined>;

export type UsersControllerGetProfileIdsVariables = ServerContext['fetcherOptions'];

export const fetchUsersControllerGetProfileIds = (
	variables: UsersControllerGetProfileIdsVariables,
	signal?: AbortSignal
) =>
	serverFetch<undefined, UsersControllerGetProfileIdsError, undefined, {}, {}, {}>({
		url: '/admin/users/ids',
		method: 'get',
		...variables,
		signal,
	});

export const useUsersControllerGetProfileIds = <TData = undefined>(
	variables: UsersControllerGetProfileIdsVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<undefined, UsersControllerGetProfileIdsError, TData>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, UsersControllerGetProfileIdsError, TData>(
		queryKeyFn({
			path: '/admin/users/ids',
			operationId: 'usersControllerGetProfileIds',
			variables,
		}),
		({ signal }) =>
			fetchUsersControllerGetProfileIds({ ...fetcherOptions, ...variables }, signal),
		{
			...options,
			...queryOptions,
		}
	);
};

export type UsersControllerFetchDistinctBusinessCategoriesError = Fetcher.ErrorWrapper<undefined>;

export type UsersControllerFetchDistinctBusinessCategoriesVariables =
	ServerContext['fetcherOptions'];

export const fetchUsersControllerFetchDistinctBusinessCategories = (
	variables: UsersControllerFetchDistinctBusinessCategoriesVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		UsersControllerFetchDistinctBusinessCategoriesError,
		undefined,
		{},
		{},
		{}
	>({ url: '/admin/users/business-categories', method: 'get', ...variables, signal });

export const useUsersControllerFetchDistinctBusinessCategories = <TData = undefined>(
	variables: UsersControllerFetchDistinctBusinessCategoriesVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			undefined,
			UsersControllerFetchDistinctBusinessCategoriesError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<
		undefined,
		UsersControllerFetchDistinctBusinessCategoriesError,
		TData
	>(
		queryKeyFn({
			path: '/admin/users/business-categories',
			operationId: 'usersControllerFetchDistinctBusinessCategories',
			variables,
		}),
		({ signal }) =>
			fetchUsersControllerFetchDistinctBusinessCategories(
				{ ...fetcherOptions, ...variables },
				signal
			),
		{
			...options,
			...queryOptions,
		}
	);
};

export type UsersControllerFetchIdpsError = Fetcher.ErrorWrapper<undefined>;

export type UsersControllerFetchIdpsVariables = ServerContext['fetcherOptions'];

export const fetchUsersControllerFetchIdps = (
	variables: UsersControllerFetchIdpsVariables,
	signal?: AbortSignal
) =>
	serverFetch<undefined, UsersControllerFetchIdpsError, undefined, {}, {}, {}>({
		url: '/admin/users/idps',
		method: 'get',
		...variables,
		signal,
	});

export const useUsersControllerFetchIdps = <TData = undefined>(
	variables: UsersControllerFetchIdpsVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<undefined, UsersControllerFetchIdpsError, TData>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, UsersControllerFetchIdpsError, TData>(
		queryKeyFn({
			path: '/admin/users/idps',
			operationId: 'usersControllerFetchIdps',
			variables,
		}),
		({ signal }) => fetchUsersControllerFetchIdps({ ...fetcherOptions, ...variables }, signal),
		{
			...options,
			...queryOptions,
		}
	);
};

export type UsersControllerFetchPublicAndPrivateCountsQueryParams = {
	profileIds: string[];
};

export type UsersControllerFetchPublicAndPrivateCountsError = Fetcher.ErrorWrapper<undefined>;

export type UsersControllerFetchPublicAndPrivateCountsVariables = {
	queryParams: UsersControllerFetchPublicAndPrivateCountsQueryParams;
} & ServerContext['fetcherOptions'];

export const fetchUsersControllerFetchPublicAndPrivateCounts = (
	variables: UsersControllerFetchPublicAndPrivateCountsVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		UsersControllerFetchPublicAndPrivateCountsError,
		undefined,
		{},
		UsersControllerFetchPublicAndPrivateCountsQueryParams,
		{}
	>({ url: '/admin/users/counts', method: 'get', ...variables, signal });

export const useUsersControllerFetchPublicAndPrivateCounts = <TData = undefined>(
	variables: UsersControllerFetchPublicAndPrivateCountsVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			undefined,
			UsersControllerFetchPublicAndPrivateCountsError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, UsersControllerFetchPublicAndPrivateCountsError, TData>(
		queryKeyFn({
			path: '/admin/users/counts',
			operationId: 'usersControllerFetchPublicAndPrivateCounts',
			variables,
		}),
		({ signal }) =>
			fetchUsersControllerFetchPublicAndPrivateCounts(
				{ ...fetcherOptions, ...variables },
				signal
			),
		{
			...options,
			...queryOptions,
		}
	);
};

export type UsersControllerBulkAddSubjectsToProfilesError = Fetcher.ErrorWrapper<undefined>;

export type UsersControllerBulkAddSubjectsToProfilesVariables = ServerContext['fetcherOptions'];

export const fetchUsersControllerBulkAddSubjectsToProfiles = (
	variables: UsersControllerBulkAddSubjectsToProfilesVariables,
	signal?: AbortSignal
) =>
	serverFetch<undefined, UsersControllerBulkAddSubjectsToProfilesError, undefined, {}, {}, {}>({
		url: '/admin/users/subjects',
		method: 'patch',
		...variables,
		signal,
	});

export const useUsersControllerBulkAddSubjectsToProfiles = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			UsersControllerBulkAddSubjectsToProfilesError,
			UsersControllerBulkAddSubjectsToProfilesVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useServerContext();
	return reactQuery.useMutation<
		undefined,
		UsersControllerBulkAddSubjectsToProfilesError,
		UsersControllerBulkAddSubjectsToProfilesVariables
	>(
		(variables: UsersControllerBulkAddSubjectsToProfilesVariables) =>
			fetchUsersControllerBulkAddSubjectsToProfiles({ ...fetcherOptions, ...variables }),
		options
	);
};

export type UsersControllerBulkRemoveSubjectsFromProfilesError = Fetcher.ErrorWrapper<undefined>;

export type UsersControllerBulkRemoveSubjectsFromProfilesVariables =
	ServerContext['fetcherOptions'];

export const fetchUsersControllerBulkRemoveSubjectsFromProfiles = (
	variables: UsersControllerBulkRemoveSubjectsFromProfilesVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		UsersControllerBulkRemoveSubjectsFromProfilesError,
		undefined,
		{},
		{},
		{}
	>({ url: '/admin/users/subjects', method: 'delete', ...variables, signal });

export const useUsersControllerBulkRemoveSubjectsFromProfiles = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			UsersControllerBulkRemoveSubjectsFromProfilesError,
			UsersControllerBulkRemoveSubjectsFromProfilesVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useServerContext();
	return reactQuery.useMutation<
		undefined,
		UsersControllerBulkRemoveSubjectsFromProfilesError,
		UsersControllerBulkRemoveSubjectsFromProfilesVariables
	>(
		(variables: UsersControllerBulkRemoveSubjectsFromProfilesVariables) =>
			fetchUsersControllerBulkRemoveSubjectsFromProfiles({ ...fetcherOptions, ...variables }),
		options
	);
};

export type UsersControllerGetUserPathParams = {
	id: string;
};

export type UsersControllerGetUserError = Fetcher.ErrorWrapper<undefined>;

export type UsersControllerGetUserVariables = {
	pathParams: UsersControllerGetUserPathParams;
} & ServerContext['fetcherOptions'];

export const fetchUsersControllerGetUser = (
	variables: UsersControllerGetUserVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		UsersControllerGetUserError,
		undefined,
		{},
		{},
		UsersControllerGetUserPathParams
	>({ url: '/admin/users/{id}', method: 'get', ...variables, signal });

export const useUsersControllerGetUser = <TData = undefined>(
	variables: UsersControllerGetUserVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<undefined, UsersControllerGetUserError, TData>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, UsersControllerGetUserError, TData>(
		queryKeyFn({ path: '/admin/users/{id}', operationId: 'usersControllerGetUser', variables }),
		({ signal }) => fetchUsersControllerGetUser({ ...fetcherOptions, ...variables }, signal),
		{
			...options,
			...queryOptions,
		}
	);
};

export type ItemsControllerFetchPublicItemsQueryParams = {
	limit: number;
	titleOrExternalId: string;
};

export type ItemsControllerFetchPublicItemsError = Fetcher.ErrorWrapper<undefined>;

export type ItemsControllerFetchPublicItemsVariables = {
	queryParams: ItemsControllerFetchPublicItemsQueryParams;
} & ServerContext['fetcherOptions'];

export const fetchItemsControllerFetchPublicItems = (
	variables: ItemsControllerFetchPublicItemsVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		ItemsControllerFetchPublicItemsError,
		undefined,
		{},
		ItemsControllerFetchPublicItemsQueryParams,
		{}
	>({ url: '/admin/items', method: 'get', ...variables, signal });

export const useItemsControllerFetchPublicItems = <TData = undefined>(
	variables: ItemsControllerFetchPublicItemsVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<undefined, ItemsControllerFetchPublicItemsError, TData>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, ItemsControllerFetchPublicItemsError, TData>(
		queryKeyFn({
			path: '/admin/items',
			operationId: 'itemsControllerFetchPublicItems',
			variables,
		}),
		({ signal }) =>
			fetchItemsControllerFetchPublicItems({ ...fetcherOptions, ...variables }, signal),
		{
			...options,
			...queryOptions,
		}
	);
};

export type ItemsControllerFetchRelationsBySubjectQueryParams = {
	type: string;
	subjectIds: string[];
	relationType: string;
};

export type ItemsControllerFetchRelationsBySubjectError = Fetcher.ErrorWrapper<undefined>;

export type ItemsControllerFetchRelationsBySubjectVariables = {
	queryParams: ItemsControllerFetchRelationsBySubjectQueryParams;
} & ServerContext['fetcherOptions'];

export const fetchItemsControllerFetchRelationsBySubject = (
	variables: ItemsControllerFetchRelationsBySubjectVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		ItemsControllerFetchRelationsBySubjectError,
		undefined,
		{},
		ItemsControllerFetchRelationsBySubjectQueryParams,
		{}
	>({ url: '/admin/items/relations', method: 'get', ...variables, signal });

export const useItemsControllerFetchRelationsBySubject = <TData = undefined>(
	variables: ItemsControllerFetchRelationsBySubjectVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<undefined, ItemsControllerFetchRelationsBySubjectError, TData>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, ItemsControllerFetchRelationsBySubjectError, TData>(
		queryKeyFn({
			path: '/admin/items/relations',
			operationId: 'itemsControllerFetchRelationsBySubject',
			variables,
		}),
		({ signal }) =>
			fetchItemsControllerFetchRelationsBySubject(
				{ ...fetcherOptions, ...variables },
				signal
			),
		{
			...options,
			...queryOptions,
		}
	);
};

export type ItemsControllerFetchItemUuidByExternalIdQueryParams = {
	externalId: string;
};

export type ItemsControllerFetchItemUuidByExternalIdError = Fetcher.ErrorWrapper<undefined>;

export type ItemsControllerFetchItemUuidByExternalIdVariables = {
	queryParams: ItemsControllerFetchItemUuidByExternalIdQueryParams;
} & ServerContext['fetcherOptions'];

export const fetchItemsControllerFetchItemUuidByExternalId = (
	variables: ItemsControllerFetchItemUuidByExternalIdVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		ItemsControllerFetchItemUuidByExternalIdError,
		undefined,
		{},
		ItemsControllerFetchItemUuidByExternalIdQueryParams,
		{}
	>({ url: '/admin/items/ids', method: 'get', ...variables, signal });

export const useItemsControllerFetchItemUuidByExternalId = <TData = undefined>(
	variables: ItemsControllerFetchItemUuidByExternalIdVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<undefined, ItemsControllerFetchItemUuidByExternalIdError, TData>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, ItemsControllerFetchItemUuidByExternalIdError, TData>(
		queryKeyFn({
			path: '/admin/items/ids',
			operationId: 'itemsControllerFetchItemUuidByExternalId',
			variables,
		}),
		({ signal }) =>
			fetchItemsControllerFetchItemUuidByExternalId(
				{ ...fetcherOptions, ...variables },
				signal
			),
		{
			...options,
			...queryOptions,
		}
	);
};

export type ItemsControllerFetchItemByUuidOrExternalIdPathParams = {
	id: string;
};

export type ItemsControllerFetchItemByUuidOrExternalIdError = Fetcher.ErrorWrapper<undefined>;

export type ItemsControllerFetchItemByUuidOrExternalIdVariables = {
	pathParams: ItemsControllerFetchItemByUuidOrExternalIdPathParams;
} & ServerContext['fetcherOptions'];

export const fetchItemsControllerFetchItemByUuidOrExternalId = (
	variables: ItemsControllerFetchItemByUuidOrExternalIdVariables,
	signal?: AbortSignal
) =>
	serverFetch<
		undefined,
		ItemsControllerFetchItemByUuidOrExternalIdError,
		undefined,
		{},
		{},
		ItemsControllerFetchItemByUuidOrExternalIdPathParams
	>({ url: '/admin/items/{id}', method: 'get', ...variables, signal });

export const useItemsControllerFetchItemByUuidOrExternalId = <TData = undefined>(
	variables: ItemsControllerFetchItemByUuidOrExternalIdVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			undefined,
			ItemsControllerFetchItemByUuidOrExternalIdError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useServerContext(options);
	return reactQuery.useQuery<undefined, ItemsControllerFetchItemByUuidOrExternalIdError, TData>(
		queryKeyFn({
			path: '/admin/items/{id}',
			operationId: 'itemsControllerFetchItemByUuidOrExternalId',
			variables,
		}),
		({ signal }) =>
			fetchItemsControllerFetchItemByUuidOrExternalId(
				{ ...fetcherOptions, ...variables },
				signal
			),
		{
			...options,
			...queryOptions,
		}
	);
};

export type QueryOperation =
	| {
			path: '/admin/navigations';
			operationId: 'adminNavigationsControllerGetNavigationBarsOverview';
			variables: AdminNavigationsControllerGetNavigationBarsOverviewVariables;
	  }
	| {
			path: '/admin/navigations/items';
			operationId: 'adminNavigationsControllerGetAllNavigationElements';
			variables: AdminNavigationsControllerGetAllNavigationElementsVariables;
	  }
	| {
			path: '/admin/navigations/items/{id}';
			operationId: 'adminNavigationsControllerGetNavigationElementById';
			variables: AdminNavigationsControllerGetNavigationElementByIdVariables;
	  }
	| {
			path: '/admin/navigations/{placement}';
			operationId: 'adminNavigationsControllerGetNavigationBarItemsByPlacement';
			variables: AdminNavigationsControllerGetNavigationBarItemsByPlacementVariables;
	  }
	| {
			path: '/admin/organisations/with-users';
			operationId: 'adminOrganisationsControllerFetchOrganisationsWithUsers';
			variables: AdminOrganisationsControllerFetchOrganisationsWithUsersVariables;
	  }
	| {
			path: '/admin/permissions';
			operationId: 'permissionsControllerGetPermissions';
			variables: PermissionsControllerGetPermissionsVariables;
	  }
	| {
			path: '/admin/translations/nl.json';
			operationId: 'translationsControllerGetTranslationsJson';
			variables: TranslationsControllerGetTranslationsJsonVariables;
	  }
	| {
			path: '/admin/translations';
			operationId: 'translationsControllerGetTranslations';
			variables: TranslationsControllerGetTranslationsVariables;
	  }
	| {
			path: '/admin/user-groups';
			operationId: 'userGroupsControllerGetUserGroups';
			variables: UserGroupsControllerGetUserGroupsVariables;
	  }
	| {
			path: '/admin/content-page-labels';
			operationId: 'contentPageLabelsControllerFetchContentPageLabels';
			variables: ContentPageLabelsControllerFetchContentPageLabelsVariables;
	  }
	| {
			path: '/admin/content-pages';
			operationId: 'contentPagesControllerGetContentPageByPath';
			variables: ContentPagesControllerGetContentPageByPathVariables;
	  }
	| {
			path: '/admin/content-pages/overview';
			operationId: 'contentPagesControllerFetchContentPages';
			variables: ContentPagesControllerFetchContentPagesVariables;
	  }
	| {
			path: '/admin/content-pages/path-exists';
			operationId: 'contentPagesControllerDoesContentPageExist';
			variables: ContentPagesControllerDoesContentPageExistVariables;
	  }
	| {
			path: '/admin/content-pages/public';
			operationId: 'contentPagesControllerGetPublicContentItems';
			variables: ContentPagesControllerGetPublicContentItemsVariables;
	  }
	| {
			path: '/admin/content-pages/projects/public';
			operationId: 'contentPagesControllerGetPublicProjectContentItems';
			variables: ContentPagesControllerGetPublicProjectContentItemsVariables;
	  }
	| {
			path: '/admin/content-pages/labels';
			operationId: 'contentPagesControllerFetchLabelsByContentType';
			variables: ContentPagesControllerFetchLabelsByContentTypeVariables;
	  }
	| {
			path: '/admin/content-pages/types';
			operationId: 'contentPagesControllerGetContentTypes';
			variables: ContentPagesControllerGetContentTypesVariables;
	  }
	| {
			path: '/admin/content-pages/{id}';
			operationId: 'contentPagesControllerGetContentPageById';
			variables: ContentPagesControllerGetContentPageByIdVariables;
	  }
	| {
			path: '/admin/content-pages/access';
			operationId: 'contentPagesControllerGetUserGroupsFromContentPage';
			variables: ContentPagesControllerGetUserGroupsFromContentPageVariables;
	  }
	| {
			path: '/admin/player-ticket';
			operationId: 'playerTicketControllerGetPlayableUrl';
			variables: PlayerTicketControllerGetPlayableUrlVariables;
	  }
	| {
			path: '/admin/lookup/subjects';
			operationId: 'lookupControllerFetchSubjects';
			variables: LookupControllerFetchSubjectsVariables;
	  }
	| {
			path: '/admin/lookup/education-levels';
			operationId: 'lookupControllerFetchEducationLevels';
			variables: LookupControllerFetchEducationLevelsVariables;
	  }
	| {
			path: '/';
			operationId: 'statusControllerGetStatusRoot';
			variables: StatusControllerGetStatusRootVariables;
	  }
	| {
			path: '/status';
			operationId: 'statusControllerGetStatus';
			variables: StatusControllerGetStatusVariables;
	  }
	| {
			path: '/status-full';
			operationId: 'statusControllerGetStatusFull';
			variables: StatusControllerGetStatusFullVariables;
	  }
	| {
			path: '/admin/users';
			operationId: 'usersControllerGetProfiles';
			variables: UsersControllerGetProfilesVariables;
	  }
	| {
			path: '/admin/users/names';
			operationId: 'usersControllerGetNamesByProfileIds';
			variables: UsersControllerGetNamesByProfileIdsVariables;
	  }
	| {
			path: '/admin/users/ids';
			operationId: 'usersControllerGetProfileIds';
			variables: UsersControllerGetProfileIdsVariables;
	  }
	| {
			path: '/admin/users/business-categories';
			operationId: 'usersControllerFetchDistinctBusinessCategories';
			variables: UsersControllerFetchDistinctBusinessCategoriesVariables;
	  }
	| {
			path: '/admin/users/idps';
			operationId: 'usersControllerFetchIdps';
			variables: UsersControllerFetchIdpsVariables;
	  }
	| {
			path: '/admin/users/counts';
			operationId: 'usersControllerFetchPublicAndPrivateCounts';
			variables: UsersControllerFetchPublicAndPrivateCountsVariables;
	  }
	| {
			path: '/admin/users/{id}';
			operationId: 'usersControllerGetUser';
			variables: UsersControllerGetUserVariables;
	  }
	| {
			path: '/admin/items';
			operationId: 'itemsControllerFetchPublicItems';
			variables: ItemsControllerFetchPublicItemsVariables;
	  }
	| {
			path: '/admin/items/relations';
			operationId: 'itemsControllerFetchRelationsBySubject';
			variables: ItemsControllerFetchRelationsBySubjectVariables;
	  }
	| {
			path: '/admin/items/ids';
			operationId: 'itemsControllerFetchItemUuidByExternalId';
			variables: ItemsControllerFetchItemUuidByExternalIdVariables;
	  }
	| {
			path: '/admin/items/{id}';
			operationId: 'itemsControllerFetchItemByUuidOrExternalId';
			variables: ItemsControllerFetchItemByUuidOrExternalIdVariables;
	  };
